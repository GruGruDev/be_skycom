# Generated by Django 4.2.3 on 2023-07-21 03:36
import uuid

import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import simple_history.models
from django.conf import settings
from django.db import migrations
from django.db import models

import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name="created"),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name="modified"),
                ),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=100)),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("phone", models.CharField(max_length=30)),
                ("is_online", models.BooleanField(default=False, null=True)),
                ("is_exportdata", models.BooleanField(default=False, null=True)),
                ("is_CRM", models.BooleanField(default=False, null=True)),
                ("is_hotdata", models.BooleanField(default=False, null=True)),
                ("is_active", models.BooleanField(default=True, null=True)),
                ("is_superuser", models.BooleanField(default=False)),
                ("is_staff", models.BooleanField(default=False)),
            ],
            options={
                "db_table": "tbl_User",
                "ordering": ["-created"],
            },
            managers=[
                ("objects", users.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Department",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "tbl_User_Department",
            },
        ),
        migrations.CreateModel(
            name="GroupUser",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "tbl_User_GroupUser",
            },
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(max_length=255)),
                ("data", models.JSONField(max_length=255)),
            ],
            options={
                "db_table": "tbl_User_Role",
            },
        ),
        migrations.CreateModel(
            name="HistoricalUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name="created"),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name="modified"),
                ),
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ("name", models.CharField(max_length=100)),
                ("email", models.EmailField(db_index=True, max_length=254)),
                ("phone", models.CharField(max_length=30)),
                ("is_online", models.BooleanField(default=False, null=True)),
                ("is_exportdata", models.BooleanField(default=False, null=True)),
                ("is_CRM", models.BooleanField(default=False, null=True)),
                ("is_hotdata", models.BooleanField(default=False, null=True)),
                ("is_active", models.BooleanField(default=True, null=True)),
                ("is_superuser", models.BooleanField(default=False)),
                ("is_staff", models.BooleanField(default=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "phongban",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="users.department",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="users.role",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical user",
                "verbose_name_plural": "historical users",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name="user",
            name="group",
            field=models.ManyToManyField(blank=True, db_table="tbl_User_GroupUserDetail", to="users.groupuser"),
        ),
        migrations.AddField(
            model_name="user",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="phongban",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="users.department"),
        ),
        migrations.AddField(
            model_name="user",
            name="role",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="users.role"),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
    ]
