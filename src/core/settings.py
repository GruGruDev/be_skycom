"""
Django settings for core project.
Generated by 'django-admin startproject' using Django 4.1.
"""

import os
from datetime import timedelta
from pathlib import Path
from urllib.parse import urlparse

import sentry_sdk
from dotenv import load_dotenv
from sentry_sdk.integrations.django import DjangoIntegration

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "django-inse")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = 0
# DEBUG = int(os.environ.get("DEBUG", default=1))
ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", "*").split(" ")
ALLOWED_CIDR_NETS = (
    os.environ.get("DJANGO_ALLOWED_CIDR_NETS").split(" ")
    if os.environ.get("DJANGO_ALLOWED_CIDR_NETS")
    else None
)

CORS_ALLOW_ALL_ORIGINS = bool(DEBUG)
CORS_ALLOWED_ORIGINS = (
    os.environ.get("DJANGO_CORS_ALLOWED_ORIGINS").split(" ")
    if os.environ.get("DJANGO_CORS_ALLOWED_ORIGINS")
    else []
)

# Auth model
AUTH_USER_MODEL = "users.User"

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # THIRD-PARTY APPS #
    "rest_framework",
    "rest_framework_simplejwt",
    "drf_yasg",
    "corsheaders",
    "simple_history",
    "storages",
    # LOCAL APPS #
    "users",
    "leads",
    "customers",
    "locations",
    "promotions",
    "products",
    "warehouses",
    "orders",
    "delivery",
    "files",
    "webhook",
]

MIDDLEWARE = [
    "allow_cidr.middleware.AllowCIDRMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "simple_history.middleware.HistoryRequestMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"

# Database
DATABASES = {
    "default": {
        "ENGINE": os.environ.get(
            "SQL_ENGINE", "django.db.backends.postgresql_psycopg2"
        ),
        "NAME": os.environ.get("SQL_DATABASE", ""),
        "USER": os.environ.get("SQL_USER", ""),
        "PASSWORD": os.environ.get("SQL_PASSWORD", ""),
        "HOST": os.environ.get("SQL_HOST", ""),
        "PORT": os.environ.get("SQL_PORT", ""),
        "OPTIONS": {"sslmode": "disable"},
    }
}


# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
LANGUAGE_CODE = "en-us"
TIME_ZONE = "Asia/Ho_Chi_Minh"
USE_I18N = True
USE_TZ = True

# DRF configs
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    # LimitOffsetPagination
    "DEFAULT_PAGINATION_CLASS": "core.pagination.StandardResultsSetPagination",
    "PAGE_SIZE": int(os.environ.get("PAGE_SIZE", 20)),
    # Allow client to override, using `?page_size=xxx`.
    "PAGINATE_BY_PARAM": "page_size",
    # Maximum limit allowed when using `?page_size=xxx`.
    "MAX_PAGINATE_BY": 500,
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
}

# Sentry logging setup
if DEBUG == 0:
    SENTRY_DSN = os.environ.get("SENTRY_DSN", None)
    if SENTRY_DSN:
        sentry_sdk.init(
            dsn=SENTRY_DSN,
            integrations=[DjangoIntegration()],
            traces_sample_rate=1.0,
            send_default_pii=True,
        )

# Swagger settings
SWAGGER_SETTINGS = {
    "USE_SESSION_AUTH": False,
    "SECURITY_DEFINITIONS": {
        "Authorization Token (JWT)": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "description": "Authorize with token, Format: Bearer <token>",
        }
    },
}

# django-filters backend
FILTERS_NULL_CHOICE_LABEL = "_is_null"
FILTERS_NULL_CHOICE_VALUE = "null"

# JWT settings
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=10),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=30),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(days=1),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=7),
}

# AWS S3 Base Settings
AWS_S3_ENDPOINT_URL = os.environ.get("AWS_S3_ENDPOINT_URL")
AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_STORAGE_BUCKET_NAME")
AWS_S3_SIGNATURE_VERSION = "s3v4"

if not DEBUG:
    # =================================================================== #
    # CÀI ĐẶT CHO MÔI TRƯỜNG PRODUCTION (khi DEBUG=False)                  #
    # =================================================================== #
    URL_ROOT = os.environ.get("URL_ROOT", "")
    if AWS_S3_ENDPOINT_URL:
        parsed_url = urlparse(AWS_S3_ENDPOINT_URL)
        AWS_S3_CUSTOM_DOMAIN = f"{parsed_url.netloc}/{AWS_STORAGE_BUCKET_NAME}"
    else:
        AWS_S3_CUSTOM_DOMAIN = ""

    STORAGES = {
        "default": {
            "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
            "OPTIONS": {"location": f"{URL_ROOT}/media".lstrip("/")},
        },
        "staticfiles": {
            "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
            "OPTIONS": {
                "location": f"{URL_ROOT}/static".lstrip("/"),
                "object_parameters": {"CacheControl": "max-age=86400"},
            },
        },
    }
    STATIC_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/{URL_ROOT}/static/".replace('//', '/')
    MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/{URL_ROOT}/media/".replace('//', '/')
    IMAGE_BASE_URL = MEDIA_URL

else:
    # =================================================================== #
    # CÀI ĐẶT CHO MÔI TRƯỜNG DEVELOPMENT (khi DEBUG=True)                 #
    # =================================================================== #
    STATIC_URL = "/static/"
    STATIC_ROOT = BASE_DIR / "staticfiles"
    MEDIA_URL = "/media/"
    MEDIA_ROOT = BASE_DIR / "media"
    IMAGE_BASE_URL = MEDIA_URL

# SET MAX SIZE UPLOAD FILE
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5 MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5 MB

# AIRFLOW
DAG_ID_AFTER_IMPORT_FILE = os.environ.get("DAG_ID_AFTER_IMPORT_FILE", "")

# Logging settings
LOG_VIEWER_FILES_PATTERN = "*.log*"
LOG_VIEWER_FILES_DIR = os.path.join(BASE_DIR, "logs")

# MEDIA_ROOT = os.path.join(BASE_DIR, "mediafiles")
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


# MEMPHIS SETTING
MEMPHIS_HOST = os.environ.get("MEMPHIS_HOST", "memphis.memphis.svc.cluster.local")
MEMPHIS_USERNAME = os.environ.get("MEMPHIS_USERNAME", "call_center_service")
MEMPHIS_PASSWORD = os.environ.get("MEMPHIS_PASSWORD", "Skycom@123")
SERVICE_PRODUCER = os.environ.get("SERVICE_PRODUCER", "call-center-producer-dev")
SERVICE_CONSUMER = os.environ.get("SERVICE_CONSUMER", "call-center-consumer-dev")

# station
LEAD_CHANNEL_STATION = os.environ.get("LEAD_CHANNEL_STATION", "lead_station_dev")
ACTIVITY_LOG_STATION = os.environ.get(
"ACTIVITY_LOG_STATION", "tam-tracking-activity-dev"
)
TAM_PRODUCER = os.environ.get("TAM_PRODUCER", "tam-tracking-producer-dev")
TAM_CONSUMER = os.environ.get("TAM_CONSUMER", "tam-tracking-consumer-dev")

# Logging settings
LOG_VIEWER_FILES_PATTERN = "*.log*"
LOG_VIEWER_FILES_DIR = os.path.join(BASE_DIR, "logs")
LOG_VIEWER_PAGE_LENGTH = 25  # total log lines per-page
LOG_VIEWER_MAX_READ_LINES = 1000  # total log lines will be read
LOG_VIEWER_PATTERNS = ["[INFO]", "[DEBUG]", "[WARNING]", "[ERROR]", "[CRITICAL]"]
LOGGING = {
"version": 1,
"disable_existing_loggers": False,
"formatters": {
"console": {"format": "%(name)-12s %(levelname)-8s %(message)s"},
"file": {"format": "%(asctime)s %(name)-12s %(levelname)-8s %(message)s"},
},
"handlers": {
"console": {
"level": "DEBUG",
"class": "logging.StreamHandler",
"formatter": "console",
},
"file": {
"level": "DEBUG",
"class": "logging.handlers.TimedRotatingFileHandler",
"formatter": "file",
"filename": os.path.join(BASE_DIR, "logs/logs.log"),
"when": "D",  # this specifies the interval
"interval": 1,  # defaults to 1, only necessary for other values
"backupCount": 3,  # how many backup file to keep, 3 days
},
},
"loggers": {"": {"level": "WARNING", "handlers": ["console", "file"]}},
}

# VIETTEL POST
VIETTEL_POST_WEBHOOK_SECRET_KEY = os.environ.get("VIETTEL_POST_WEBHOOK_SECRET_KEY")

# VN POST
VNPOST_API_URL = os.environ.get("VNPOST_API_URL", "https://connect-my.vnpost.vn")

# GHN
URL_API_GHN = os.environ.get("URL_API_GHN")
